#!/bin/bash
set -e

cd /app

# is a redis server linked?
REDIS_HOST=${REDIS_PORT_6379_TCP_ADDR:-localhost}
REDIS_PORT=${REDIS_PORT_6379_TCP_PORT:-6379}

cat <<EOF > src/server/config.coffee
# Generated by script: $0
exports.Configuration =
  host:
    SCHEME: "http" # used in generating URLs
    FQDN: "${FQDN:-localhost}"
    PORT: ${PORT:-5000}
    USE_PORT_IN_URL: ${USE_PORT_IN_URL:-true}

  redis:
    host: "${REDIS_HOST:-localhost}"
    port: ${REDIS_PORT:-6379}
    select: ${REDIS_SELECT:-15}

  ssl:
    USE_NODE_SSL: ${USE_NODE_SSL:-false} # only necessary if you're not having nginx proxy through to node
    PRIVATE_KEY: "${PRIVATE_KEY:-/path/to/server.key}"
    CERTIFICATE: "${CERTIFICATE:-/path/to/certificate.crt}"

  features:
    SERVER_NICK: "${SERVER_NICK:-Server}"
    irc_server: ${IRC_SERVER:-false} # beta atm, you may not want to enable this as server stability isn't guaranteed

  chat:
    log: ${LOG:-true} # keeps a log server-side for participants who may have been offline

    webshot_previews: # requires phantomjs to be installed
      enabled: ${WEBSHOT_PREVIEWS_ENABLED:-true} # http://www.youtube.com/watch?feature=player_detailpage&v=k3-zaTr6OUo#t=23s
      PHANTOMJS_PATH: "${PHANTOMJS_PATH:-/usr/bin/phantomjs}" # sudo apt-get install phantomjs

    rate_limiting: # slows down spammers
      enabled: ${RATE_LIMITING_ENABLED:-true}
      rate: ${RATE_LIMITING_RATE:-5.0} # # allowed messages
      per: ${RATE_LIMITING_PER:-8000.0} # per # of seconds

    edit: # can users edit sent messages?
      enabled: ${EDIT_ENABLED:-true}
      allow_unidentified: ${EDIT_ALLOW_UNIDENTIFIED:-true} # whether anonymous users can edit their messages within the context of the same session
      maximum_time_delta: ${MAXIMUM_TIME_DELTA:-(1000 * 60 * 60 * 2)} # after 2 hours, chat messages will not be editable, delete property to enable indefinitely

  server_hosted_file_transfer:
    enabled: ${SERVER_HOSTED_FILE_TRANSFER_ENABLED:-false}
    size_limit: "${SERVER_HOSTED_FILE_TRANSFER:-${CLIENT_MAX_BODY_SIZE:-10mb}}" # nginx user? make sure this matches your nginx configuration: e.g., look for line \`client_max_body_size 10M;\`

  DEBUG: ${DEBUG:-false}
EOF

chown echoplexus:echoplexus /app/src/server/config.coffee

# start supervisord
/usr/bin/supervisord -c /etc/supervisor/supervisord.conf

# start redis server if ${REDIS_HOST} is localhost
if [ "${REDIS_HOST}" == "localhost" ]; then

  (
    cat <<EOF
daemonize ${DAEMONIZE:-no}
pidfile ${PIDFILE:-/var/run/redis.pid}
port ${REDIS_PORT:-6379}
tcp-backlog ${TCP_BACKLOG:-511}
${BIND:+bind ${BIND}}
${UNIXSOCKET:+unixsocket ${UNIXSOCKET:-/tmp/redis.sock}}
${UNIXSOCKETPERM:+unixsocketperm ${UNIXSOCKETPERM:-755}}
timeout ${TIMEOUT:-0}
tcp-keepalive ${TCP_KEEPALIVE:-60}
loglevel ${LOGLEVEL:-notice}
logfile "${LOGFILE}"
${SYSLOG_ENABLED:+syslog-enabled ${SYSLOG_ENABLED:-no}}
${SYSLOG_IDENT:+syslog-ident ${SYSLOG_IDENT:-redis}}
${SYSLOG_FACILITY:+syslog-facility ${SYSLOG_FACILITY:-local0}}
databases ${DATABASES:-16}
stop-writes-on-bgsave-error ${STOP_WRITES_ON_BGSAVE_ERROR:-yes}
rdbcompression ${RDBCOMPRESSION:-yes}
rdbchecksum ${RDBCHECKSUM:-yes}
dbfilename ${DBFILENAME:-dump.rdb}
dir ${DIR:-./}
${SLAVEOF_MASTERIP:+slaveof ${SLAVEOF_MASTERIP} ${SLAVEOF_MASTERPORT}}
${MASTER_PASSWORD:+masterauth ${MASTER_PASSWORD}}
slave-serve-stale-data ${SLAVE_SERVE_STALE_DATA:-yes}
slave-read-only ${SLAVE_READ_ONLY:-yes}
repl-ping-slave-period ${REPL_PING_SLAVE_PERIOD:-10}
${REPL_TIMEOUT:+repl-timeout ${REPL_TIMEOUT:-60}}
repl-disable-tcp-nodelay ${REPL_DISABLE_TCP_NODELAY:-no}
${REPL_BACKLOG_SIZE:+reply-backlog-size ${REPL_BACKLOG_SIZE:-1mb}}
${REPL_BACKLOG_TTL:+repl-backlog-ttl ${REPL_BACKLOG_TTL:-3600}}
slave-priority ${SLAVE_PRIORITY:-100}
${MIN_SLAVES_TO_WRITE:+min-slaves-to-write ${MIN_SLAVES_TO_WRITE:-3}}
${MIN_SLAVES_MAX_LAG:+min-slaves-max-lag ${MIN_SLAVES_MAX_LAG:-10}}
${REQUIREPASS:+requirepass ${REQUIREPASS:-foobared}}
${MAXCLIENTS:+maxclients ${MAXCLIENTS:-10000}}
${MAXMEMORY:+maxmemory ${MAXMEMORY:-100mb}}
${MAXMEMORY_POLICY:+maxmemory-policy ${MAXMEMORY_POLICY:-volatile-lru}}
${MAXMEMORY_SAMPLES:+maxmemory-samples ${MAXMEMORY_SAMPLES:-3}}
appendonly ${APPENDONLY:-no}
appendfilename "${APPENDFILENAME:-appendonly.aof}"
appendfsync ${APPENDFSYNC:-everysec}
no-appendfsync-on-rewrite ${NO_APPENDFSYNC_ON_REWRITE:-no}
auto-aof-rewrite-percentage ${AUTO_AOF_REWRITE_PERCENTAGE:-100}
auto-aof-rewrite-min-size ${AUTO_AOF_REWRITE_MIN_SIZE:-64mb}
lua-time-limit ${LUA_TIME_LIMIT:-5000}
slowlog-log-slower-than ${SLOWLOG_LOG_SLOWER_THAN:-10000}
slowlog-max-len ${SLOWLOG_MAX_LEN:-128}
latency-monitor-threshold ${LATENCY_MONITORY_THRESHOLD:-0}
notify-keyspace-events "${NOTIFY_KEYSPACE_EVENTS}"
hash-max-ziplist-entries ${HASH_MAX_ZIPLIST_ENTRIES:-512}
hash-max-ziplist-value ${HASH_MAX_ZIPLIST_VALUE:-64}
list-max-ziplist-entries ${LIST_MAX_ZIPLIST_ENTRIES:-512}
list-max-ziplist-value ${LIST_MAX_ZIPLIST_VALUE:-64}
set-max-intset-entries ${SET_MAX_INTSET_ENTRIES:-512}
zset-max-ziplist-entries ${ZSET_MAX_ZIPLIST_ENTRIES:-128}
zset-max-ziplist-value ${ZSET_MAX_ZIPLIST_VALUE:-64}
hll-sparse-max-bytes ${HLL_SPARSE_MAX_BYTES:-3000}
activerehashing ${ACTIVE_REHASHING:-yes}
hz ${HZ:-10}
aof-rewrite-incremental-fsync ${AOF_REWRITE_INCREMENTAL_FSYNC:-yes}
EOF
    [ -n "${RENAME_COMMANDS}" ] &&
      for rename_command in ${RENAME_COMMANDS:-CONFIG:""}; do
        old=`echo ${rename_command} | cut -d: -f1`
        new=`echo ${rename_command} | cut -d: -f2`
        echo "rename-command $old \"$new\""
      done
    for save_pair in ${SAVE:-900:1 300:10 60:10000} ; do
      save_seconds=`echo ${save_pair} | cut -d: -f1`
      save_changes=`echo ${save_pair} | cut -d: -f2`
      echo "save ${save_seconds} ${save_changes}"
    done
    for class_pentuple in ${CLIENT_OUTPUT_BUFFER_LIMIT:-normal:0:0:0 slave:256mb:64mb:60 pubsub:32mb:8mb:60}; do
      class=`echo ${class_pentuple} | cut -d: -f1`
      hard_limit=`echo ${class_pentuple} | cut -d: -f2`
      soft_limit=`echo ${class_pentuple} | cut -d: -f3`
      soft_seconds=`echo ${class_pentuple} | cut -d: -f4`
      echo "client-output-buffer-limit ${class} ${hard_limit} ${soft_limit} ${soft_seconds}"
    done
  ) > /etc/redis/redis.conf

  # configure supervisord to start redis (manual)
  cat > /etc/supervisor/conf.d/redis.conf <<EOF
[program:redis]
priority=20
directory=/tmp
command=/usr/bin/redis-server
user=root
autostart=false
autorestart=true
stdout_logfile=/var/log/supervisor/%(program_name)s.log
stderr_logfile=/var/log/supervisor/%(program_name)s.log
EOF
  supervisorctl reload

  # fix permissions and ownership of /var/lib/mysql
  chown -R redis:redis /var/lib/redis
  chmod 755 /var/lib/redis

  echo "Starting redis server..."
  supervisorctl start redis >/dev/null

  # wait for mysql server to start (max 120 seconds)
  timeout=120
  while redis-cli -h ${REDIS_HOST} -p ${REDIS_PORT} ${DATABASE_PASSWORD:+-a $DATABASE_PASSWORD} info 2>&1 | grep -q ERR
  do
    timeout=$(expr $timeout - 1)
    if [ $timeout -eq 0 ]; then
      echo "Failed to start redis server"
      exit 1
    fi
    sleep 1
  done

fi

# Start echoplexus
sudo -u echoplexus -EH grunt exec:production

# As the ENTRYPOINT script, when this exits the docker container will Exit.
exit 0

